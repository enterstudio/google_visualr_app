<!--
  Start
-->
<div class='append-bottom'>
  <h2>Docs</h2>
  <p>
    This page explains the standard GoogleVisualr constructor, and the standard methods exposed by all visualizations.
  </p>
  <p>
    All visualizations are actually a wrapper of a <%= link_to "DataTable", "http://code.google.com/apis/visualization/documentation/reference.html#DataTable" %> JavaScript object,
    By adding columns and rows, we are actually populating the DataTable,
    which then materializes as its namesake-chart when render is invoked.
  </p>
</div>

<!--
  Constructors
-->
<div id='constructor'>

  <h3 class='sub'>Constructors</h3>
  <p>
    All GoogleVisualr visualizations have two constructors.
  </p>
  <p>
    <code>
      # Creates an empty visualization instance           <br/>
      @chart = GoogleVisualr::AreaChart.new               <br/><br/>
      # Creates a populated visualization instance        <br/>
      @chart = GoogleVisualr::AreaChart.new(<em>data</em>)
    </code>
  </p>
  <h6>GoogleVisualr::<em>visualization</em>.new</h6>
  <p>
    Creates an empty visualization instance. Use <em>add_columns</em>, <em>add_rows</em> and <em>set_value</em> or <em>set_cell</em> methods to populate the visualization.
  </p>
  <h6>GoogleVisualr::<em>visualization</em>.new(<em>data object</em>)</h6>
  <p>
    Creates a visualization by passing a JavaScript-string-literal like data object into the data parameter. This object can contain formatting options.
  </p>

  <div class ='append-bottom'>
    <hr>
    <h3>Syntax Description of Data Object</h3>
    <p>
      The data object consists of two required top-level properties, cols and rows.
    </p>

    <h5><span class='cem'>cols</span> property</h5>
    <p>
      <span class='cem'>cols</span> is an array of objects describing the ID and type of each column. Each property is an object with the following properties (case-sensitive):
    </p>
    <p>
      <ul>
        <li>
          <span class='cem'>type</span> [Required] The data type of the data in the column. Supports the following string values:
          <ul>
            <li>
              'string'    - String value. Example values: v:'foo', :v:'bar'
            </li>
            <li>
              'number'    - Number value. Example values: v:7, v:3.14, v:-55
            </li>
            <li>
              'boolean'   - Boolean value ('true' or 'false'). Example values: v:true, v:false
            </li>
            <li>
              'date'      - Date object, with the time truncated. Example value: v:Date.parse('2010-01-01')
            </li>
            <li>
              'datetime'  - DateTime/Time object, time inclusive. Example value: v:DateTime.parse('2010-01-01 14:20:25')
            </li>
            <li>
              'timeofday' - Array of 3 numbers or 4 numbers, [Hour,Minute,Second,(Optional) Milliseconds]. Example value: v:[8, 15, 0]
            </li>
          </ul>
        </li>
        <li>
          <span class='cem'>label</span> [Optional] A string value that some visualizations display for this column. Example: label:'Height'
        </li>
        <li>
          <span class='cem'>id</span> [Optional] A unique (basic alphanumeric) string ID of the column. Be careful not to choose a JavaScript keyword. Example: id:'col_1'
        </li>
      </ul>
    </p>

    <h5><span class='cem'>rows</span> property</h5>
    <p>
      The rows property holds an array of row objects. Each row object has one required property called <span class='cem'>c</span>, which is an array of cells in that row.
    </p>
    <p>
      Each cell in the table is described by an object with the following properties:
    </p>
    <p>
      <ul>
        <li>
          <span class='cem'>v</span> [Optional] The cell value. The data type should match the column data type.
        </li>
        <li>
          <span class='cem'>f</span> [Optional] A string version of the <span class='cem'>v</span> value, formatted strictly for display only. If omitted, a string version of v will be used.
        </li>
      </ul>
    </p>
    <p>
      Cells in the row array should be in the same order as their column descriptions in cols.
    </p>
    <p>
      To indicate a null cell, you can either specify null, or set empty string for a cell in an array, or omit trailing array members. So, to indicate a row with null for the first two cells, you could specify [ '', '', {cell_val}] or [null, null, {cell_val}].
    </p>
  </div>

  <div class='append-bottom'>
    <hr>
    <h3>Example</h3>
    <div id='chart'></div>
    <%= @chart.render('chart') %>
  </div>

  <div class='append-bottom'>
    <hr>
    <h3>Code</h3>
    <div>
      <p>
        In your controller, create your chart object with a data object, then set any configuration options.
      </p>
      <script src="http://gist.github.com/357423.js?file=constructor_format.rb"></script>
    </div>
    <div>
      <p>
        In your view, use the <em>chart.render(div_id)</em> method to generate JavaScript during rendering of the view.
      </p>
      <script src="http://gist.github.com/357423.js?file=constructor_format.html.erb"></script>
    </div>
  </div>

</div>

<!--
  Methods
-->
<div ='Methods'>

  <h3 class='sub'>Methods</h3>

  <div ='append-bottom'>
    <h5><span class='cem'>add_column(type [,label [,id]])</span></h5>
    <p>
      Adds a new column to the visualization.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>type</span> [Required] The data type of the data in the column. Supports the following string values:
          <ul>
            <li>
              'string'    - String value. Example values: v:'foo', :v:'bar'
            </li>
            <li>
              'number'    - Number value. Example values: v:7, v:3.14, v:-55
            </li>
            <li>
              'boolean'   - Boolean value ('true' or 'false'). Example values: v:true, v:false
            </li>
            <li>
              'date'      - Date object, with the time truncated. Example value: v:Date.parse('2010-01-01')
            </li>
            <li>
              'datetime'  - DateTime/Time object, time inclusive. Example value: v:DateTime.parse('2010-01-01 14:20:25')
            </li>
            <li>
              'timeofday' - Array of 3 numbers or 4 numbers, [Hour,Minute,Second,(Optional) Milliseconds]. Example value: v:[8, 15, 0]
            </li>
          </ul>
        </li>
        <li>
          <span class='cem'>label</span> [Optional] A string value that some visualizations display for this column. Example: label:'Height'
        </li>
        <li>
          <span class='cem'>id</span> [Optional] A unique (basic alphanumeric) string ID of the column. Be careful not to choose a JavaScript keyword. Example: id:'col_1'
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Adds a column with data type and label<br/>
        @chart.add_column('string', 'Name')
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <hr/>
    <h5><span class='cem'>add_columns(columns)</span></h5>
    <p>
      Adds multiple columns to the visualization.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>columns</span> [Required] An array of column objects {:type, :label, :id}. Calls <em>add_column</em> for each column object.
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Adds 2 columns with data type and label<br/>
        @chart.add_columns( [ { :type => 'string', :label => 'Name' }, { :type => 'number', :label => 'Age' }  ] )
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <hr/>
    <h5><span class='cem'>add_row(row)</span></h5>
    <p>
      Adds a new row to the visualization. Call method without any parameters to add an empty row, otherwise, call method with a row object.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>row</span> [Optional] An array of cell values specifying the data for the new row.
          <ul>
            <li>
              You can specify a value for a cell (e.g. 'hi') or specify a formatted value using cell objects (e.g. {v:55, f:'Fifty-five'}) as described in the constructor section.
            </li>
            <li>
              You can mix simple values and cell objects in the same method call.
            </li>
            <li>
               To create an empty cell, use nil or empty string.
            </li>
          </ul>
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Adds an empty row<br/>
        @chart.add_row()<br/><br/>

        # Adds a row with a string and a date value<br/>
        @chart.add_row( [ 'Hermione', Date.parse('1999-01-01') ] )<br/><br/>

        # Adds a row with two cells; second cell with a formatted value<br/>
        @chart.add_row( [ 'Hermione', {v: Date.parse('1999-01-01'), f: 'January First, Nineteen ninety-nine'} ] )<br/><br/>

        @chart.add_row( [ 'Col1Val', nil, 'Col3Val' ] ) // 2nd column is empty<br/>
        @chart.add_row( [ 'Col1Val', '' , 'Col3Val' ] ) // 2nd column is empty
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <hr/>
    <h5><span class='cem'>add_rows(array_or_num)</span></h5>
    <p>
      Adds multiple rows to the visualization. You can call this method with data to populate a set of new rows or create new empty rows.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>array_or_num</span> [Required] Either an array or a number.
            <ul>
              <li>
                Array: An array of row objects used to populate a set of new rows. Each row is an object as described in add_row().
              </li>
              <li>
                Number: A number specifying the number of new empty rows to create.
              </li>
            </ul>
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Adds 2 rows<br/>
        @chart.add_rows([<br/>
            ['John', 18],<br/>
            ['Jill', 22] <br/>
        ])<br/><br/>

        # Adds 5 empty rows<br/>
        @chart.add_rows(5)
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <hr/>
    <h5><span class='cem'>set_cell(row_index, column_index, value [, formatted_value])</span></h5>
    <p>
      Sets the value and/or formatted value of a cell.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>row_index</span> [Required] A number greater than or equal to zero, but smaller than the total number of rows.
        </li>
        <li>
          <span class='cem'>column_index</span> [Required] A number greater than or equal to zero, but smaller than the total number of columns.
        </li>
        <li>
          <span class='cem'>value</span> [Required] The cell value. The data type should match the column data type.
        </li>
        <li>
          <span class='cem'>formatted_value</span> [Optional] A string version of <em>value</em>, formatted strictly for display only. If omitted, a string version of <em>value</em> will be used.
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Sets a cell without a formatted value<br/>
        @chart.set_cell(0, 0, 'John')<br/><br/>

        # Sets a cell with a formatted value<br/>
        @chart.set_cell(0, 1, 18, '18 years old')
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <hr/>
    <h5><span class='cem'>set_value(row_index, column_index, value)</span></h5>
    <p>
      Sets the value of a cell. Overwrites any existing cell value, and clear out any formatted value for the cell.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>row_index</span> [Required] A number greater than or equal to zero, but smaller than the total number of rows.
        </li>
        <li>
          <span class='cem'>column_index</span> [Required] A number greater than or equal to zero, but smaller than the total number of columns.
        </li>
        <li>
          <span class='cem'>value</span> [Required] The cell value. The data type should match the column data type.
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Sets a cell<br/>
        @chart.set_value(0, 0, 'John')
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <hr/>
    <h5><span class='cem'>format(formatter [, formatter]*)</span></h5>
    <p>
      Applies one or more formatters to the visualization to format the columns as specified by the formatter/s.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>formatter/s</span> [Required] One, or an array of <%= link_to "formatters", :controller => 'example', :action => 'formatters' %>.
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Passes in 1 formatter<br/>
        @chart.format(formatter)<br/><br/>

        # Passes in 3 formatters<br/>
        @chart.format(formatter_1, formatter_2, formatter_2)
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <h5><span class='cem'>set_options(options)</span></h5>
    <p>
      Sets chart configuration options with a hash.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>options</span> [Required] A hash of configuration options.
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Sets configuration options<br/>
        options = { :width => 400, :height => 240, :title => 'Company Performance', :legend => 'bottom' }
        @chart.set_options(options)
      </code>
    </p>
  </div>

  <div ='append-bottom'>
    <h5><span class='cem'>render(div_id)</span></h5>
    <p>
      Generates JavaScript and renders the visualization in the final HTML output.
    </p>
    <h6>Parameters</h6>
    <p>
      <ul>
        <li>
          <span class='cem'>div_id</span> [Required] The ID of the DIV element that the visualization should be rendered in.
        </li>
      </ul>
    </p>
    <p>
      <code>
        # Renders chart in Div with ID chart<br/>
        @chart.render('chart')
      </code>
    </p>
  </div>

</div>